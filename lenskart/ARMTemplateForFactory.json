{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "lenskart"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"ls_webscrapping_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_webscrapping'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/masterPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stores",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_stores",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_raw_stores",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "products",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "soruce_products",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_raw_products",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "transaction",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_transcations",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_raw_transactions",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "customer",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_customers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_raw_customers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "dataflow_insights",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "dataflow_cleansing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_insights",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"transaction": {},
									"product": {},
									"stores": {},
									"customers": {},
									"TopRatedSink": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {},
									"sink6": {},
									"sink7": {},
									"sink8": {},
									"sink9": {},
									"sink10": {},
									"sink11": {},
									"sink12": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dataflow_cleansing",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "stores",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "products",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "transaction",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_cleansing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sinkProducts": {},
									"sinkCustomers": {},
									"sinkTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-05T12:30:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source_stores')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_stores')]",
				"[concat(variables('factoryId'), '/datasets/soruce_products')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_products')]",
				"[concat(variables('factoryId'), '/datasets/source_transcations')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_transactions')]",
				"[concat(variables('factoryId'), '/datasets/source_customers')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_customers')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_insights')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_cleansing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prep_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prep_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prep_transactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soruce_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_webscrapping",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products_dataframe.csv",
						"folderPath": "Source",
						"container": "lenskartdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_webscrapping')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_webscrapping",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"folderPath": "Source",
						"container": "lenskartdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_webscrapping')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_stores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_webscrapping",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "lenskart_stores.csv",
						"folderPath": "Source",
						"container": "lenskartdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_webscrapping')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_transcations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_webscrapping",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "transactions.csv",
						"folderPath": "Source",
						"container": "lenskartdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_webscrapping')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_datamart_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "datamart",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_datamart_factTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "datamart",
					"table": "factTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_datamart_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "datamart",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_CustomersWithMaxPurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "CustomersWithMaxPurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_LowSellingProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "LowSellingProducts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_LowStockProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "LowStockProducts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_MostValuableCustomers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "MostValuableCustomers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_RevenuePerYear')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "RevenuePerYear"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_TopBuyers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "TopBuyers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_TopRatedProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "TopRatedProducts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_TopRatedStores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "TopRatedStores"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_TopSellingClassifications')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "TopSellingClassifications"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_TotalRevenueYearAndCategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "TotalRevenueYearAndCategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_avgRatingLocation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "avgRatingLocation"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_insights_lowRatedStores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "insights",
					"table": "lowRatedStores"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_raw_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_raw_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "Brand_Name",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "Occasion",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Width",
						"type": "nvarchar"
					},
					{
						"name": "Model_Name",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "nvarchar"
					},
					{
						"name": "Lenskart_Price",
						"type": "nvarchar"
					},
					{
						"name": "Offer_Name",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "nvarchar"
					},
					{
						"name": "Suited_For",
						"type": "nvarchar"
					},
					{
						"name": "Search_Product Name",
						"type": "nvarchar"
					},
					{
						"name": "Classification",
						"type": "nvarchar"
					},
					{
						"name": "Average_Ratings",
						"type": "nvarchar"
					},
					{
						"name": "Total_No_of_Ratings",
						"type": "nvarchar"
					},
					{
						"name": "Purchase_Count",
						"type": "nvarchar"
					},
					{
						"name": "Wishlist_Count",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_raw_stores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Store_Name",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "Location",
						"type": "nvarchar"
					},
					{
						"name": "Timings",
						"type": "nvarchar"
					},
					{
						"name": "Rating_(reviewers)",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "stores"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_raw_transactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_webscrapping')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_webscrapping_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_cleansing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_raw_products",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_customers",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_transactions",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "prep_products",
								"type": "DatasetReference"
							},
							"name": "sinkProducts"
						},
						{
							"dataset": {
								"referenceName": "prep_customers",
								"type": "DatasetReference"
							},
							"name": "sinkCustomers"
						},
						{
							"dataset": {
								"referenceName": "prep_transactions",
								"type": "DatasetReference"
							},
							"name": "sinkTransactions"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          Brand_Name as string,",
						"          Color as string,",
						"          Occasion as string,",
						"          Size as string,",
						"          Width as string,",
						"          Model_Name as string,",
						"          Market_Price as string,",
						"          Lenskart_Price as string,",
						"          Offer_Name as string,",
						"          Quantity as string,",
						"          Suited_For as string,",
						"          {Search_Product Name} as string,",
						"          Classification as string,",
						"          Average_Ratings as string,",
						"          Total_No_of_Ratings as string,",
						"          Purchase_Count as string,",
						"          Wishlist_Count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as string,",
						"          transaction_date as string,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source1 derive(Occasion = coalesce(Occasion,'Any Occasion',Occasion),",
						"          Color = coalesce(Color,'No Color Available',Color),",
						"          Size = coalesce(Size,'No Size Available',Size),",
						"          Width = coalesce(Width,'No Width Available',Width),",
						"          Offer_Name = coalesce(Offer_Name,'No Offer',Offer_Name),",
						"          Suited_For = coalesce(Suited_For,'Any age group',Suited_For)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkProducts",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkCustomers",
						"source3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkTransactions"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_raw_products')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_customers')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_transactions')]",
				"[concat(variables('factoryId'), '/datasets/prep_products')]",
				"[concat(variables('factoryId'), '/datasets/prep_customers')]",
				"[concat(variables('factoryId'), '/datasets/prep_transactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_facttable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_raw_customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_transactions",
								"type": "DatasetReference"
							},
							"name": "Transactions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_datamart_factTable",
								"type": "DatasetReference"
							},
							"name": "FactTable"
						},
						{
							"dataset": {
								"referenceName": "sql_datamart_products",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "sql_datamart_customers",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customers",
						"source(output(",
						"          id as string,",
						"          Brand_Name as string,",
						"          Color as string,",
						"          Occasion as string,",
						"          Size as string,",
						"          Width as string,",
						"          Model_Name as string,",
						"          Market_Price as string,",
						"          Lenskart_Price as integer,",
						"          Offer_Name as string,",
						"          Quantity as string,",
						"          Suited_For as string,",
						"          {Search_Product Name} as string,",
						"          Classification as string,",
						"          Average_Ratings as string,",
						"          Total_No_of_Ratings as string,",
						"          Purchase_Count as string,",
						"          Wishlist_Count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Products",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as string,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Transactions",
						"Transactions, Customers join(Transactions@customer_id == Customers@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join2 select(mapColumn(",
						"          transaction_id,",
						"          customer_id = Transactions@customer_id,",
						"          product_id,",
						"          quantity = Transactions@quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join1, Products join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FactTable",
						"Products sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"Customers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_raw_customers')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_products')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_transactions')]",
				"[concat(variables('factoryId'), '/datasets/sql_datamart_factTable')]",
				"[concat(variables('factoryId'), '/datasets/sql_datamart_products')]",
				"[concat(variables('factoryId'), '/datasets/sql_datamart_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_insights')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_raw_transactions",
								"type": "DatasetReference"
							},
							"name": "transaction"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_products",
								"type": "DatasetReference"
							},
							"name": "product"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_stores",
								"type": "DatasetReference"
							},
							"name": "stores"
						},
						{
							"dataset": {
								"referenceName": "sql_raw_customers",
								"type": "DatasetReference"
							},
							"name": "customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_insights_TopRatedStores",
								"type": "DatasetReference"
							},
							"name": "TopRatedSink"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_TopSellingClassifications",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_LowStockProducts",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_CustomersWithMaxPurchase",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_TopBuyers",
								"type": "DatasetReference"
							},
							"name": "sink5"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_RevenuePerYear",
								"type": "DatasetReference"
							},
							"name": "sink6"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_TotalRevenueYearAndCategory",
								"type": "DatasetReference"
							},
							"name": "sink7"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_TopSellingClassifications",
								"type": "DatasetReference"
							},
							"name": "sink8"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_TopRatedProducts",
								"type": "DatasetReference"
							},
							"name": "sink9"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_lowRatedStores",
								"type": "DatasetReference"
							},
							"name": "sink10"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_avgRatingLocation",
								"type": "DatasetReference"
							},
							"name": "sink11"
						},
						{
							"dataset": {
								"referenceName": "sql_insights_MostValuableCustomers",
								"type": "DatasetReference"
							},
							"name": "sink12"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "MaxCountCustomerCategory"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "TopBuyers"
						},
						{
							"name": "TopSellingClassificatoinBrandName"
						},
						{
							"name": "split1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RevenuePerYear"
						},
						{
							"name": "TotalRevenueYearAndCategory"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "TopRatedStore"
						},
						{
							"name": "TopSellingCategoryWise"
						},
						{
							"name": "TopRatedProducts"
						},
						{
							"name": "StoresWithLowRating"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "sort3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "mostValuableCustomers"
						},
						{
							"name": "top10Customers"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> transaction",
						"source(output(",
						"          id as string,",
						"          Brand_Name as string,",
						"          Color as string,",
						"          Occasion as string,",
						"          Size as string,",
						"          Width as string,",
						"          Model_Name as string,",
						"          Market_Price as string,",
						"          Lenskart_Price as integer,",
						"          Offer_Name as string,",
						"          Quantity as integer,",
						"          Suited_For as string,",
						"          {Search_Product Name} as string,",
						"          Classification as string,",
						"          Average_Ratings as string,",
						"          Total_No_of_Ratings as string,",
						"          Purchase_Count as string,",
						"          Wishlist_Count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> product",
						"source(output(",
						"          Store_Name as string,",
						"          Address as string,",
						"          Location as string,",
						"          Timings as string,",
						"          {Rating_(reviewers)} as string,",
						"          Phone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stores",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> customers",
						"transaction, product join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(Classification),",
						"     customer_id = max(customer_id),",
						"          count = count(customer_id)) ~> MaxCountCustomerCategory",
						"transaction aggregate(groupBy(customer_id),",
						"     quantity = sum(quantity)) ~> aggregate2",
						"aggregate2 sort(desc(quantity, true)) ~> TopBuyers",
						"product aggregate(groupBy(Classification),",
						"     Brand_Name = max(Brand_Name),",
						"          Model_Name = max(Model_Name),",
						"          Purchase_Count = max(Purchase_Count)) ~> TopSellingClassificatoinBrandName",
						"product split(Quantity<100,",
						"     disjoint: false) ~> split1@(LowOnStock, OnStock)",
						"transaction, product join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 derive(year = year(transaction_date)) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(year),",
						"     quantity = sum(transaction@quantity),",
						"          total_transaction = sum(transaction@quantity*Lenskart_Price)) ~> RevenuePerYear",
						"derivedColumn1 aggregate(groupBy(year,",
						"          Classification),",
						"     quantity = sum(transaction@quantity),",
						"          total_revenue = sum(transaction@quantity*Lenskart_Price)) ~> TotalRevenueYearAndCategory",
						"stores derive(rating = toFloat(substring({Rating_(reviewers)}, 1, 4))) ~> derivedColumn2",
						"derivedColumn2 aggregate(groupBy(Location),",
						"     rating = max(rating),",
						"          Store_Name = max(Store_Name),",
						"          Address = max(Address)) ~> TopRatedStore",
						"product aggregate(groupBy(Classification),",
						"     Brand_Name = min(Brand_Name),",
						"          Model_Name = min(Model_Name),",
						"          Purchase_Count = min(Purchase_Count)) ~> TopSellingCategoryWise",
						"product aggregate(groupBy(Classification),",
						"     Brand_Name = max(Brand_Name),",
						"          Model_Name = max(Model_Name),",
						"          Top_Rated_Products = max(Average_Ratings),",
						"          Total_No_of_Ratings = max(Total_No_of_Ratings)) ~> TopRatedProducts",
						"derivedColumn2 aggregate(groupBy(Location),",
						"     low_rated_stores = min(rating),",
						"          Store_Name = min(Store_Name),",
						"          Address = min(Address)) ~> StoresWithLowRating",
						"StoresWithLowRating sort(asc(low_rated_stores, true)) ~> sort1",
						"TopRatedStore sort(desc(rating, true)) ~> sort2",
						"derivedColumn2 aggregate(groupBy(Location),",
						"     Average_rating = round(avg(rating), 2)) ~> aggregate3",
						"aggregate3 sort(asc(Average_rating, true)) ~> sort3",
						"join2 aggregate(groupBy(customer_id),",
						"     purchased_amount = sum(transaction@quantity * Lenskart_Price)) ~> aggregate4",
						"aggregate4 sort(desc(purchased_amount, true)) ~> mostValuableCustomers",
						"surrogateKey1 filter(Position < 11) ~> top10Customers",
						"mostValuableCustomers keyGenerate(output(Position as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"top10Customers select(mapColumn(",
						"          Position,",
						"          customer_id,",
						"          purchased_amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TopRatedSink",
						"TopSellingClassificatoinBrandName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
						"split1@LowOnStock sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
						"MaxCountCustomerCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink4",
						"TopBuyers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink5",
						"RevenuePerYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink6",
						"TotalRevenueYearAndCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink7",
						"TopSellingCategoryWise sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink8",
						"TopRatedProducts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink9",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink10",
						"sort3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink11",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink12"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_raw_transactions')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_products')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_stores')]",
				"[concat(variables('factoryId'), '/datasets/sql_raw_customers')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_TopRatedStores')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_TopSellingClassifications')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_LowStockProducts')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_CustomersWithMaxPurchase')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_TopBuyers')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_RevenuePerYear')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_TotalRevenueYearAndCategory')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_TopRatedProducts')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_lowRatedStores')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_avgRatingLocation')]",
				"[concat(variables('factoryId'), '/datasets/sql_insights_MostValuableCustomers')]"
			]
		}
	]
}